// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SwaggerJson;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace SwaggerJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("openapi")]
        public string Openapi { get; set; }

        [JsonProperty("info")]
        public Info Info { get; set; }

        [JsonProperty("paths")]
        public Paths Paths { get; set; }

        [JsonProperty("components")]
        public Components Components { get; set; }
    }

    public partial class Components
    {
        [JsonProperty("schemas")]
        public Schemas Schemas { get; set; }
    }

    public partial class Schemas
    {
        [JsonProperty("Customer")]
        public Customer Customer { get; set; }

        [JsonProperty("Invoice")]
        public Invoice Invoice { get; set; }

        [JsonProperty("Part")]
        public Part Part { get; set; }

        [JsonProperty("Payment")]
        public Payment Payment { get; set; }

        [JsonProperty("Product")]
        public Product Product { get; set; }

        [JsonProperty("ServiceRequest")]
        public ServiceRequest ServiceRequest { get; set; }

        [JsonProperty("ServiceTicket")]
        public ServiceTicket ServiceTicket { get; set; }

        [JsonProperty("Technician")]
        public Technician Technician { get; set; }
    }

    public partial class Customer
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public CustomerProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class CustomerProperties
    {
        [JsonProperty("customerId")]
        public CustomerId CustomerId { get; set; }

        [JsonProperty("name")]
        public Email Name { get; set; }

        [JsonProperty("email")]
        public Email Email { get; set; }

        [JsonProperty("phoneNumber")]
        public PhoneNumber PhoneNumber { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("invoices")]
        public Invoices Invoices { get; set; }

        [JsonProperty("serviceRequests")]
        public Invoices ServiceRequests { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("type")]
        public AddressType Type { get; set; }

        [JsonProperty("nullable")]
        public bool Nullable { get; set; }
    }

    public partial class CustomerId
    {
        [JsonProperty("type")]
        public AddressType Type { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public Format? Format { get; set; }
    }

    public partial class Email
    {
        [JsonProperty("type")]
        public AddressType Type { get; set; }

        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [JsonProperty("x_cw_operation")]
        public string XCwOperation { get; set; }
    }

    public partial class Invoices
    {
        [JsonProperty("type")]
        public InvoicesType Type { get; set; }

        [JsonProperty("items")]
        public CustomerClass Items { get; set; }

        [JsonProperty("nullable")]
        public bool Nullable { get; set; }
    }

    public partial class CustomerClass
    {
        [JsonProperty("$ref")]
        public Ref Ref { get; set; }
    }

    public partial class PhoneNumber
    {
        [JsonProperty("type")]
        public AddressType Type { get; set; }

        [JsonProperty("format")]
        public Format Format { get; set; }

        [JsonProperty("nullable")]
        public bool Nullable { get; set; }
    }

    public partial class Invoice
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public InvoiceProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class InvoiceProperties
    {
        [JsonProperty("invoiceId")]
        public CustomerId InvoiceId { get; set; }

        [JsonProperty("customerId")]
        public PhoneNumber CustomerId { get; set; }

        [JsonProperty("invoiceDate")]
        public PhoneNumber InvoiceDate { get; set; }

        [JsonProperty("dueDate")]
        public PhoneNumber DueDate { get; set; }

        [JsonProperty("totalAmount")]
        public PhoneNumber TotalAmount { get; set; }

        [JsonProperty("status")]
        public Address Status { get; set; }

        [JsonProperty("customer")]
        public CustomerClass Customer { get; set; }

        [JsonProperty("payments")]
        public Invoices Payments { get; set; }
    }

    public partial class Part
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public PartProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class PartProperties
    {
        [JsonProperty("partId")]
        public CustomerId PartId { get; set; }

        [JsonProperty("name")]
        public Address Name { get; set; }

        [JsonProperty("description")]
        public Address Description { get; set; }

        [JsonProperty("price")]
        public PhoneNumber Price { get; set; }

        [JsonProperty("quantityAvailable")]
        public PhoneNumber QuantityAvailable { get; set; }
    }

    public partial class Payment
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public PaymentProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class PaymentProperties
    {
        [JsonProperty("paymentId")]
        public CustomerId PaymentId { get; set; }

        [JsonProperty("invoiceId")]
        public PhoneNumber InvoiceId { get; set; }

        [JsonProperty("paymentDate")]
        public PhoneNumber PaymentDate { get; set; }

        [JsonProperty("amount")]
        public PhoneNumber Amount { get; set; }

        [JsonProperty("paymentMethod")]
        public Address PaymentMethod { get; set; }

        [JsonProperty("transactionId")]
        public PhoneNumber TransactionId { get; set; }

        [JsonProperty("invoice")]
        public CustomerClass Invoice { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public ProductProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class ProductProperties
    {
        [JsonProperty("productId")]
        public CustomerId ProductId { get; set; }

        [JsonProperty("name")]
        public Address Name { get; set; }

        [JsonProperty("category")]
        public Address Category { get; set; }

        [JsonProperty("description")]
        public Address Description { get; set; }

        [JsonProperty("price")]
        public PhoneNumber Price { get; set; }

        [JsonProperty("serviceRequests")]
        public Invoices ServiceRequests { get; set; }
    }

    public partial class ServiceRequest
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public ServiceRequestProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class ServiceRequestProperties
    {
        [JsonProperty("requestId")]
        public CustomerId RequestId { get; set; }

        [JsonProperty("customerId")]
        public PhoneNumber CustomerId { get; set; }

        [JsonProperty("productId")]
        public PhoneNumber ProductId { get; set; }

        [JsonProperty("requestDate")]
        public PhoneNumber RequestDate { get; set; }

        [JsonProperty("description")]
        public Address Description { get; set; }

        [JsonProperty("status")]
        public Address Status { get; set; }

        [JsonProperty("customer")]
        public CustomerClass Customer { get; set; }

        [JsonProperty("product")]
        public CustomerClass Product { get; set; }

        [JsonProperty("serviceTickets")]
        public Invoices ServiceTickets { get; set; }
    }

    public partial class ServiceTicket
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public ServiceTicketProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class ServiceTicketProperties
    {
        [JsonProperty("ticketId")]
        public CustomerId TicketId { get; set; }

        [JsonProperty("requestId")]
        public PhoneNumber RequestId { get; set; }

        [JsonProperty("technicianId")]
        public PhoneNumber TechnicianId { get; set; }

        [JsonProperty("ticketDate")]
        public PhoneNumber TicketDate { get; set; }

        [JsonProperty("ticketNotes")]
        public Address TicketNotes { get; set; }

        [JsonProperty("status")]
        public Address Status { get; set; }

        [JsonProperty("request")]
        public CustomerClass Request { get; set; }

        [JsonProperty("technician")]
        public CustomerClass Technician { get; set; }
    }

    public partial class Technician
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public TechnicianProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class TechnicianProperties
    {
        [JsonProperty("technicianId")]
        public CustomerId TechnicianId { get; set; }

        [JsonProperty("name")]
        public Address Name { get; set; }

        [JsonProperty("phoneNumber")]
        public PhoneNumber PhoneNumber { get; set; }

        [JsonProperty("email")]
        public Address Email { get; set; }

        [JsonProperty("specialization")]
        public Address Specialization { get; set; }

        [JsonProperty("serviceTickets")]
        public Invoices ServiceTickets { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public partial class Paths
    {
        [JsonProperty("/api/Customers/Customers/{customerId}")]
        public ApiCustomersCustomersCustomerId ApiCustomersCustomersCustomerId { get; set; }

        [JsonProperty("/api/Customers/Customers")]
        public ApiCustomersCustomers ApiCustomersCustomers { get; set; }

        [JsonProperty("/api/Customers/Customers/search")]
        public ApiSearch ApiCustomersCustomersSearch { get; set; }

        [JsonProperty("/api/Customers/{customerId}")]
        public ApiCustomersCustomerId ApiCustomersCustomerId { get; set; }

        [JsonProperty("/api/Invoices/Invoice/{invoiceId}")]
        public ApiInvoicesInvoiceInvoiceId ApiInvoicesInvoiceInvoiceId { get; set; }

        [JsonProperty("/api/Invoices/Invoices")]
        public ApiInvoicesInvoicesClass ApiInvoicesInvoices { get; set; }

        [JsonProperty("/api/Invoices/Invoices/search")]
        public ApiSearch ApiInvoicesInvoicesSearch { get; set; }

        [JsonProperty("/api/Invoices/Invoices/{invoiceId}")]
        public ApiInvoicesInvoicesInvoiceIdClass ApiInvoicesInvoicesInvoiceId { get; set; }

        [JsonProperty("/api/Parts/Parts/{partId}")]
        public ApiPartsPartsPartId ApiPartsPartsPartId { get; set; }

        [JsonProperty("/api/Parts/Parts")]
        public ApiInvoicesInvoicesClass ApiPartsParts { get; set; }

        [JsonProperty("/api/Parts/Parts/search")]
        public ApiSearch ApiPartsPartsSearch { get; set; }

        [JsonProperty("/api/Payments/Payment/{paymentId}")]
        public ApiPaymentsPaymentPaymentId ApiPaymentsPaymentPaymentId { get; set; }

        [JsonProperty("/api/Payments/Payments")]
        public ApiInvoicesInvoicesClass ApiPaymentsPayments { get; set; }

        [JsonProperty("/api/Payments/Patments/search")]
        public ApiPaymentsPatmentsSearch ApiPaymentsPatmentsSearch { get; set; }

        [JsonProperty("/api/Payments/Payments/{paymentId}")]
        public ApiInvoicesInvoicesInvoiceIdClass ApiPaymentsPaymentsPaymentId { get; set; }

        [JsonProperty("/api/Product/{productId}")]
        public ApiProductProductId ApiProductProductId { get; set; }

        [JsonProperty("/api/Product")]
        public ApiProduct ApiProduct { get; set; }

        [JsonProperty("/api/Product/search")]
        public ApiSearch ApiProductSearch { get; set; }

        [JsonProperty("/api/ServiceRequest/ServiceRequest/{requestId}")]
        public ApiServiceRequestServiceRequestRequestIdClass ApiServiceRequestServiceRequestRequestId { get; set; }

        [JsonProperty("/api/ServiceRequest/ServiceRequest")]
        public ApiServiceRequestServiceRequest ApiServiceRequestServiceRequest { get; set; }

        [JsonProperty("/api/ServiceRequest/ServiceRequest/search")]
        public ApiSearch ApiServiceRequestServiceRequestSearch { get; set; }

        [JsonProperty("/api/ServiceRequest/RequestServices")]
        public ApiServiceRequestRequestServicesClass ApiServiceRequestRequestServices { get; set; }

        [JsonProperty("/api/Technician/Technician/{technicianId}")]
        public ApiServiceRequestServiceRequestRequestIdClass ApiTechnicianTechnicianTechnicianId { get; set; }

        [JsonProperty("/api/Technician/Technician")]
        public ApiTechnicianTechnician ApiTechnicianTechnician { get; set; }

        [JsonProperty("/api/Technician/Technician/search")]
        public ApiSearch ApiTechnicianTechnicianSearch { get; set; }

        [JsonProperty("/api/Technician/Technicians")]
        public ApiServiceRequestRequestServicesClass ApiTechnicianTechnicians { get; set; }
    }

    public partial class ApiCustomersCustomerId
    {
        [JsonProperty("delete")]
        public Post Delete { get; set; }
    }

    public partial class Post
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("requestBody", NullValueHandling = NullValueHandling.Ignore)]
        public RequestBody RequestBody { get; set; }

        [JsonProperty("responses")]
        public PostResponses Responses { get; set; }

        [JsonProperty("x_cw_operation", NullValueHandling = NullValueHandling.Ignore)]
        public string XCwOperation { get; set; }

        [JsonProperty("parameters", NullValueHandling = NullValueHandling.Ignore)]
        public PostParameter[] Parameters { get; set; }
    }

    public partial class PostParameter
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("in")]
        public In In { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ParameterRequired { get; set; }

        [JsonProperty("schema")]
        public CustomerId Schema { get; set; }
    }

    public partial class RequestBody
    {
        [JsonProperty("content")]
        public RequestBodyContent Content { get; set; }
    }

    public partial class RequestBodyContent
    {
        [JsonProperty("application/json")]
        public ApplicationJsonClass ContentApplicationJson { get; set; }

        [JsonProperty("text/json")]
        public ApplicationJsonClass TextJson { get; set; }

        [JsonProperty("application/*+json")]
        public ApplicationJsonClass ApplicationJson { get; set; }
    }

    public partial class ApplicationJsonClass
    {
        [JsonProperty("schema")]
        public CustomerClass Schema { get; set; }
    }

    public partial class PostResponses
    {
        [JsonProperty("200")]
        public Fluffy200 The200 { get; set; }
    }

    public partial class Fluffy200
    {
        [JsonProperty("description")]
        public Description Description { get; set; }
    }

    public partial class ApiCustomersCustomers
    {
        [JsonProperty("get")]
        public ApiCustomersCustomersGet Get { get; set; }

        [JsonProperty("post")]
        public Post Post { get; set; }
    }

    public partial class ApiCustomersCustomersGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("responses")]
        public PurpleResponses Responses { get; set; }

        [JsonProperty("x_cw_operation")]
        public string XCwOperation { get; set; }
    }

    public partial class PurpleResponses
    {
        [JsonProperty("200")]
        public Purple200 The200 { get; set; }
    }

    public partial class Purple200
    {
        [JsonProperty("description")]
        public Description Description { get; set; }

        [JsonProperty("content")]
        public PurpleContent Content { get; set; }
    }

    public partial class PurpleContent
    {
        [JsonProperty("text/plain")]
        public PurpleApplicationJson TextPlain { get; set; }

        [JsonProperty("application/json")]
        public PurpleApplicationJson ApplicationJson { get; set; }

        [JsonProperty("text/json")]
        public PurpleApplicationJson TextJson { get; set; }
    }

    public partial class PurpleApplicationJson
    {
        [JsonProperty("schema")]
        public ApplicationJsonSchema Schema { get; set; }
    }

    public partial class ApplicationJsonSchema
    {
        [JsonProperty("type")]
        public InvoicesType Type { get; set; }

        [JsonProperty("items")]
        public CustomerClass Items { get; set; }
    }

    public partial class ApiCustomersCustomersCustomerId
    {
        [JsonProperty("get")]
        public ApiCustomersCustomersCustomerIdGet Get { get; set; }

        [JsonProperty("put")]
        public Post Put { get; set; }
    }

    public partial class ApiCustomersCustomersCustomerIdGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public PostParameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public FluffyResponses Responses { get; set; }

        [JsonProperty("x_cw_operation", NullValueHandling = NullValueHandling.Ignore)]
        public string XCwOperation { get; set; }
    }

    public partial class FluffyResponses
    {
        [JsonProperty("200")]
        public Tentacled200 The200 { get; set; }
    }

    public partial class Tentacled200
    {
        [JsonProperty("description")]
        public Description Description { get; set; }

        [JsonProperty("content")]
        public FluffyContent Content { get; set; }
    }

    public partial class FluffyContent
    {
        [JsonProperty("text/plain")]
        public ApplicationJsonClass TextPlain { get; set; }

        [JsonProperty("application/json")]
        public ApplicationJsonClass ApplicationJson { get; set; }

        [JsonProperty("text/json")]
        public ApplicationJsonClass TextJson { get; set; }
    }

    public partial class ApiSearch
    {
        [JsonProperty("get")]
        public ApiCustomersCustomersSearchGet Get { get; set; }
    }

    public partial class ApiCustomersCustomersSearchGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public PurpleParameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public PostResponses Responses { get; set; }
    }

    public partial class PurpleParameter
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("in")]
        public In In { get; set; }

        [JsonProperty("schema")]
        public ParameterSchema Schema { get; set; }
    }

    public partial class ParameterSchema
    {
        [JsonProperty("type")]
        public AddressType Type { get; set; }
    }

    public partial class ApiInvoicesInvoiceInvoiceId
    {
        [JsonProperty("get")]
        public ApiCustomersCustomersCustomerIdGet Get { get; set; }
    }

    public partial class ApiInvoicesInvoicesClass
    {
        [JsonProperty("get")]
        public ApiInvoicesInvoicesGet Get { get; set; }

        [JsonProperty("post")]
        public Post Post { get; set; }
    }

    public partial class ApiInvoicesInvoicesGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("responses")]
        public PurpleResponses Responses { get; set; }
    }

    public partial class ApiInvoicesInvoicesInvoiceIdClass
    {
        [JsonProperty("put")]
        public Post Put { get; set; }

        [JsonProperty("delete")]
        public Post Delete { get; set; }
    }

    public partial class ApiPartsPartsPartId
    {
        [JsonProperty("get")]
        public ApiPartsPartsPartIdGet Get { get; set; }

        [JsonProperty("put")]
        public Post Put { get; set; }

        [JsonProperty("delete")]
        public Post Delete { get; set; }
    }

    public partial class ApiPartsPartsPartIdGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public PostParameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public PurpleResponses Responses { get; set; }
    }

    public partial class ApiPaymentsPatmentsSearch
    {
        [JsonProperty("get")]
        public ApiPaymentsPatmentsSearchGet Get { get; set; }
    }

    public partial class ApiPaymentsPatmentsSearchGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("parameters")]
        public PostParameter[] Parameters { get; set; }

        [JsonProperty("responses")]
        public PostResponses Responses { get; set; }
    }

    public partial class ApiPaymentsPaymentPaymentId
    {
        [JsonProperty("get")]
        public ApiPartsPartsPartIdGet Get { get; set; }
    }

    public partial class ApiProduct
    {
        [JsonProperty("get")]
        public ApiProductGet Get { get; set; }

        [JsonProperty("post")]
        public Post Post { get; set; }
    }

    public partial class ApiProductGet
    {
        [JsonProperty("tags")]
        public string[] Tags { get; set; }

        [JsonProperty("responses")]
        public PostResponses Responses { get; set; }
    }

    public partial class ApiProductProductId
    {
        [JsonProperty("get")]
        public Post Get { get; set; }

        [JsonProperty("delete")]
        public Post Delete { get; set; }
    }

    public partial class ApiServiceRequestRequestServicesClass
    {
        [JsonProperty("post")]
        public Post Post { get; set; }
    }

    public partial class ApiServiceRequestServiceRequest
    {
        [JsonProperty("get")]
        public ApiProductGet Get { get; set; }
    }

    public partial class ApiServiceRequestServiceRequestRequestIdClass
    {
        [JsonProperty("get")]
        public Post Get { get; set; }

        [JsonProperty("put")]
        public Post Put { get; set; }

        [JsonProperty("delete")]
        public Post Delete { get; set; }
    }

    public partial class ApiTechnicianTechnician
    {
        [JsonProperty("get")]
        public ApiInvoicesInvoicesGet Get { get; set; }
    }

    public enum AddressType { Integer, Number, String };

    public enum Format { DateTime, Double, Int32 };

    public enum Ref { ComponentsSchemasCustomer, ComponentsSchemasInvoice, ComponentsSchemasPart, ComponentsSchemasPayment, ComponentsSchemasProduct, ComponentsSchemasServiceRequest, ComponentsSchemasServiceTicket, ComponentsSchemasTechnician };

    public enum InvoicesType { Array };

    public enum In { Path, Query };

    public enum Description { Success };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, SwaggerJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, SwaggerJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AddressTypeConverter.Singleton,
                FormatConverter.Singleton,
                RefConverter.Singleton,
                InvoicesTypeConverter.Singleton,
                DescriptionConverter.Singleton,
                InConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AddressTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AddressType) || t == typeof(AddressType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "integer":
                    return AddressType.Integer;
                case "number":
                    return AddressType.Number;
                case "string":
                    return AddressType.String;
            }
            throw new Exception("Cannot unmarshal type AddressType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AddressType)untypedValue;
            switch (value)
            {
                case AddressType.Integer:
                    serializer.Serialize(writer, "integer");
                    return;
                case AddressType.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case AddressType.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type AddressType");
        }

        public static readonly AddressTypeConverter Singleton = new AddressTypeConverter();
    }

    internal class FormatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Format) || t == typeof(Format?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "date-time":
                    return Format.DateTime;
                case "double":
                    return Format.Double;
                case "int32":
                    return Format.Int32;
            }
            throw new Exception("Cannot unmarshal type Format");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Format)untypedValue;
            switch (value)
            {
                case Format.DateTime:
                    serializer.Serialize(writer, "date-time");
                    return;
                case Format.Double:
                    serializer.Serialize(writer, "double");
                    return;
                case Format.Int32:
                    serializer.Serialize(writer, "int32");
                    return;
            }
            throw new Exception("Cannot marshal type Format");
        }

        public static readonly FormatConverter Singleton = new FormatConverter();
    }

    internal class RefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ref) || t == typeof(Ref?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/components/schemas/Customer":
                    return Ref.ComponentsSchemasCustomer;
                case "#/components/schemas/Invoice":
                    return Ref.ComponentsSchemasInvoice;
                case "#/components/schemas/Part":
                    return Ref.ComponentsSchemasPart;
                case "#/components/schemas/Payment":
                    return Ref.ComponentsSchemasPayment;
                case "#/components/schemas/Product":
                    return Ref.ComponentsSchemasProduct;
                case "#/components/schemas/ServiceRequest":
                    return Ref.ComponentsSchemasServiceRequest;
                case "#/components/schemas/ServiceTicket":
                    return Ref.ComponentsSchemasServiceTicket;
                case "#/components/schemas/Technician":
                    return Ref.ComponentsSchemasTechnician;
            }
            throw new Exception("Cannot unmarshal type Ref");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Ref)untypedValue;
            switch (value)
            {
                case Ref.ComponentsSchemasCustomer:
                    serializer.Serialize(writer, "#/components/schemas/Customer");
                    return;
                case Ref.ComponentsSchemasInvoice:
                    serializer.Serialize(writer, "#/components/schemas/Invoice");
                    return;
                case Ref.ComponentsSchemasPart:
                    serializer.Serialize(writer, "#/components/schemas/Part");
                    return;
                case Ref.ComponentsSchemasPayment:
                    serializer.Serialize(writer, "#/components/schemas/Payment");
                    return;
                case Ref.ComponentsSchemasProduct:
                    serializer.Serialize(writer, "#/components/schemas/Product");
                    return;
                case Ref.ComponentsSchemasServiceRequest:
                    serializer.Serialize(writer, "#/components/schemas/ServiceRequest");
                    return;
                case Ref.ComponentsSchemasServiceTicket:
                    serializer.Serialize(writer, "#/components/schemas/ServiceTicket");
                    return;
                case Ref.ComponentsSchemasTechnician:
                    serializer.Serialize(writer, "#/components/schemas/Technician");
                    return;
            }
            throw new Exception("Cannot marshal type Ref");
        }

        public static readonly RefConverter Singleton = new RefConverter();
    }

    internal class InvoicesTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InvoicesType) || t == typeof(InvoicesType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "array")
            {
                return InvoicesType.Array;
            }
            throw new Exception("Cannot unmarshal type InvoicesType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InvoicesType)untypedValue;
            if (value == InvoicesType.Array)
            {
                serializer.Serialize(writer, "array");
                return;
            }
            throw new Exception("Cannot marshal type InvoicesType");
        }

        public static readonly InvoicesTypeConverter Singleton = new InvoicesTypeConverter();
    }

    internal class DescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Success")
            {
                return Description.Success;
            }
            throw new Exception("Cannot unmarshal type Description");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Description)untypedValue;
            if (value == Description.Success)
            {
                serializer.Serialize(writer, "Success");
                return;
            }
            throw new Exception("Cannot marshal type Description");
        }

        public static readonly DescriptionConverter Singleton = new DescriptionConverter();
    }

    internal class InConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(In) || t == typeof(In?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "path":
                    return In.Path;
                case "query":
                    return In.Query;
            }
            throw new Exception("Cannot unmarshal type In");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (In)untypedValue;
            switch (value)
            {
                case In.Path:
                    serializer.Serialize(writer, "path");
                    return;
                case In.Query:
                    serializer.Serialize(writer, "query");
                    return;
            }
            throw new Exception("Cannot marshal type In");
        }

        public static readonly InConverter Singleton = new InConverter();
    }
}
